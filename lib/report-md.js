'use strict'

const report = (module.exports = {})

// Supported Versions
report.supports = '^5.0.0 || ^5.0.0-alpha || ^5.0.0-beta'

// Output formatted results
report.results = testResults => {
  const types = {
    error: '✖',
    notice: '◆',
    unknown: '›',
    warning: '▲'
  }

  let output = []

  output.push('A11Y Report Summary\n===')
  output.push(`**Date:** ${testResults.generated.date}\n`)

  output.push(`### Total Issues: ${parseInt(testResults.total.all)}`)
  output.push(`✖ Errors: ${parseInt(testResults.total.error)} ▲ Warnings: ${parseInt(testResults.total.warning)} ◆ Notices: ${parseInt(testResults.total.notice)}`)

  // Loop through reports
  testResults.results.forEach(result => {
    output.push('\n---\n')

    output.push(`⚑ ${result.documentTitle}\n===`)
    output.push(`**URL:** [${result.pageUrl}](${result.pageUrl})\n`)

    if (result.screenCapture) {
      output.push(`<div style="width: 200px; height: 125px;"><a href="${result.screenCapture.replace(/^.*[\\\/]/, '')}" target="_blank" style="background: url('${result.screenCapture.replace(/^.*[\\\/]/, '')}') center center no-repeat; background-size: cover; width: 200px; height: 125px; display: block;"></a></div>\n`) // eslint-disable-line no-useless-escape
    }

    if (result.total.all === 0) {
      output.push('No Accessibility Issues Detected\n---')
    } else {
      output.push(`### Test Issues (${result.total.all})`)

      let group
      let counter = 0

      for (let i = 0; i < result.issues.length; i++) {
        const issue = result.issues[i]

        const selector = issue.selector ? '`' + issue.selector + '`' : null
        const context = issue.context ? '`' + issue.context + '`' : null
        const type = issue.type.charAt(0).toUpperCase() + issue.type.slice(1)

        let row = []

        // Group Reports By Type
        if (!group || group !== issue.type) {
          if (group) {
            row.push('</details>')
          }

          if (group !== issue.type) {
            group = issue.type
            counter = 0
          }

          row.push(`<details>\n<summary>${type}s: ${result.total[issue.type]}</summary>\n`)
        }

        counter++

        row.push(`|#${counter}|${types[issue.type]} ${type}: ${issue.code}|\n|---:|:---|`, `|**Issue**|${issue.message}|`)

        if (issue.recommendation) {
          row.push(`|**Fix**|${issue.recommendation}|`)
        }

        if (issue.context) {
          row.push(`|**Context**|${context}|`)
        }

        if (issue.selector) {
          row.push(`|**Selector**|${selector}|`)
        }

        if (issue.resources) {
          let links = []

          issue.resources.forEach(link => {
            links.push(`[${link.type} ${link.label}](${link.url})`)
          })

          row.push(`|**Resources**|${links.join(', ')}|`)
        }

        row.push('\n')

        output.push(row.join('\n'))
      }

      output.push('</details>\n')
    }
  })

  output.push('---\n')

  output.push(`**Report Generated by:** [SFCC DevOps - Accessibility Tester](https://github.com/sfccdevops/accessibility-tester)`)

  return output.join('\n')
}

// Output error messages
report.error = message => {
  return message
}
